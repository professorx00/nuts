/**
 * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.
 * @extends {Actor}
 */
export class nutsActor extends Actor {
  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset (to clear active effects),
    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
    const actorData = this;
    const flags = actorData.flags.nuts || {};
  }

  /**
   *
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic
   * approach is useful when you have actors & items that share a parent Document,
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return { ...super.getRollData(), ...(this.system.getRollData?.() ?? null) };
  }

  /**
   * Convert the actor document to a plain object.
   *
   * The built in `toObject()` method will ignore derived data when using Data Models.
   * This additional method will instead use the spread operator to return a simplified
   * version of the data.
   *
   * @returns {object} Plain object either via deepClone or the spread operator.
   */
  toPlainObject() {
    const result = { ...this };

    // Simplify system data.
    result.system = this.system.toPlainObject();

    // Add items.
    result.items = this.items?.size > 0 ? this.items.contents : [];

    // Add effects.
    result.effects = this.effects?.size > 0 ? this.effects.contents : [];

    return result;
  }

  async roll(dice, target, benefit) {
    let newDice = dice + 1 + benefit;
    let formula = newDice + "d12";
    const roll = new Roll(formula, this);
    let dices = roll.dice[0].results;
    const rollData = {
      rollHTML: await roll.render(),
      roll: roll._total,
      formula: formula,
      dices: dices,
      target: target,
    };
    let cardContent = await renderTemplate(
      "systems/nuts/templates/chat/challengeRoll.hbs",
      rollData
    );
    const chatData = {
      user: game.user.id,
      type: CONST.CHAT_MESSAGE_TYPES.OTHER,
      content: cardContent,
      speaker: ChatMessage.getSpeaker({ actor: this }),
      flags: { "core.canPopout": true },
    };
    ChatMessage.applyRollMode(chatData, game.settings.get("core", "rollMode"));
    await game.dice3d.showForRoll(roll, game.user, true);
    await ChatMessage.create(chatData);
  }
  async defensiveRoll(dice, level, gameType) {
    this.roll(dice);
  }

  async hardhittingRoll(dice, level, gameType) {
    let newLevel = "trained";
    if (gameType == "b") {
      if (level == 2) {
        newLevel = "experienced";
      } else if (level > 2) {
        newLevel = "mastered";
      }
    }
    if (gameType == "c") {
      if (level >= 3 && level < 6) {
        newLevel = "experienced";
      } else if (level >= 6) {
        newLevel = "mastered";
      }
    }
    console.log("level ", newLevel);
    this.roll(dice);
  }
}
